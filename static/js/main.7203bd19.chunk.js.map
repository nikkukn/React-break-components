{"version":3,"sources":["logo.svg","serviceWorker.js","examples/fetchData.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","FetechData","handleChange","e","setState","searchField","target","value","state","usersArray","fetch","then","response","json","users","this","filterUser","filter","user","name","toLowerCase","includes","style","textAlign","className","placeholder","Component","CardList","props","map","key","id","Card","alt","src","email","username","address","Address","listStyle","street","suite","city","zipcode","geo","lat","lng","SearchBox","type","onChange","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,mICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCChBAC,G,wDACJ,aAAe,IAAD,8BACZ,gBAYFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtC,EAAKC,MAAQ,CACXC,WAAY,GACZJ,YAAa,IALH,E,gEAQO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEK,WAAYK,S,+BAKvC,IAAD,EAC6BC,KAAKP,MAAjCC,EADD,EACCA,WAAYJ,EADb,EACaA,YACdW,EAAaP,EAAWQ,QAAO,SAACC,GAAD,OACnCA,EAAKC,KAAKC,cAAcC,SAAShB,EAAYe,kBAE/C,OACE,yBAAKE,MAAO,CAAEC,UAAW,WACvB,wBAAIC,UAAU,SAAd,cACA,kBAAC,EAAD,CAAWC,YAAY,cAAcvB,aAAca,KAAKb,eACxD,kBAAC,EAAD,CAAUO,WAAYO,S,GA1BLU,cAgCnBC,EAAW,SAACC,GAAD,OACf,yBAAKJ,UAAU,aACZ,IACAI,EAAMnB,WAAWoB,KAAI,SAACX,GAAD,OACpB,kBAAC,EAAD,CAAMY,IAAKZ,EAAKa,GAAIb,KAAMA,SAK1Bc,EAAO,SAACJ,GAAD,OACX,yBAAKJ,UAAU,kBACb,yBACES,IAAI,OACJC,IAAG,+BAA0BN,EAAMV,KAAKa,GAArC,4BAEL,4BAAKH,EAAMV,KAAKC,MAChB,2BAAIS,EAAMV,KAAKiB,OACf,2BAAIP,EAAMV,KAAKkB,UACf,kBAAC,EAAD,CAASC,QAAST,EAAMV,KAAKmB,YAI3BC,EAAU,SAACV,GAAD,OACd,yBAAKJ,UAAU,WACb,wBAAIF,MAAO,CAAEiB,UAAW,SACtB,4BAAKX,EAAMS,QAAQG,QACnB,4BAAKZ,EAAMS,QAAQI,OACnB,4BAAKb,EAAMS,QAAQK,MACnB,4BAAKd,EAAMS,QAAQM,SACnB,4BAAKf,EAAMS,QAAQO,IAAIC,KACvB,4BAAKjB,EAAMS,QAAQO,IAAIE,QAKvBC,EAAY,SAAC,GAAD,IAAGtB,EAAH,EAAGA,YAAavB,EAAhB,EAAgBA,aAAhB,OAChB,6BACE,2BACEsB,UAAU,SACVwB,KAAK,SACLvB,YAAaA,EACbwB,SAAU/C,MAIDD,ICvEfiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7203bd19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport \"./fetc-data.css\";\r\nclass FetechData extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      usersArray: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ usersArray: users }));\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value });\r\n  };\r\n  render() {\r\n    const { usersArray, searchField } = this.state;\r\n    const filterUser = usersArray.filter((user) =>\r\n      user.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1 className=\"title\">Users List</h1>\r\n        <SearchBox placeholder=\"search user\" handleChange={this.handleChange} />\r\n        <CardList usersArray={filterUser} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {\" \"}\r\n    {props.usersArray.map((user) => (\r\n      <Card key={user.id} user={user} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nconst Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"user\"\r\n      src={`https://robohash.org/${props.user.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.user.name}</h2>\r\n    <p>{props.user.email}</p>\r\n    <p>{props.user.username}</p>\r\n    <Address address={props.user.address} />\r\n  </div>\r\n);\r\n\r\nconst Address = (props) => (\r\n  <div className=\"address\">\r\n    <ul style={{ listStyle: \"none\" }}>\r\n      <li>{props.address.street}</li>\r\n      <li>{props.address.suite}</li>\r\n      <li>{props.address.city}</li>\r\n      <li>{props.address.zipcode}</li>\r\n      <li>{props.address.geo.lat}</li>\r\n      <li>{props.address.geo.lng}</li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n  <div>\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    ></input>\r\n  </div>\r\n);\r\nexport default FetechData;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import Example1 from \"./Example1\";\nimport FetchData from \"./examples/fetchData\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FetchData />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}